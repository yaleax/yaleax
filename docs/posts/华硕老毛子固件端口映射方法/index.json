[{"content":"1.注册 zeit帐号 可以https://zeit.co/官网直接使用 github帐号登录\n2. 在电脑上登录 zeit 安装Now CLI命令行工具并登录，需要nodejs运行环境 参考官方文档 https://zeit.co/docs\n1 2  npm i -g now now login   3.在电脑上新建一个文件夹 可以把 proxy 改成自己想要的名字\n1 2  mkdir proxy cd proxy   4.编辑now.json文件，写入以下内容，相关内容改成你自己的 1  nano now.json   1 2 3 4 5 6 7  { \u0026#34;name\u0026#34;: \u0026#34;你的应用名字\u0026#34;, \u0026#34;version\u0026#34;: 2, \u0026#34;routes\u0026#34;: [ {\u0026#34;src\u0026#34;: \u0026#34;/$1(.*)\u0026#34;,\u0026#34;dest\u0026#34;: \u0026#34;https://这里中文替换成上面的域名/$1\u0026#34;} ] }   5.上传 1  now --prod   [参考]：https://mjjj.run/archives/44.html\n","description":"","id":0,"section":"posts","tags":null,"title":"Zeit反代 v2ray 加速","uri":"https://www.yaleax.com/posts/zeit/"},{"content":"Dns64 server是什么 你有一台 ipv6的机器，想访问 ipv4的网站，Dns64 server就可以帮助你解决这个问题。路由图大概是这个样子\n1.修改 dns服务器\n1  nano /etc/resolv.conf   2.删除以前的nameserver ,使用下面这两个\nnameserver 2001:67c:2b0::4\u2028nameserver 2001:67c:2b0::6 3.保存\n粘贴完成后，你需要同时按 ctrl+x来退出,再输入y确认保存，再按Enter确认保存。\n[参考1] ：https://wangdalao.com/2913.html\n[参考2]：http://www.trex.fi/2011/dns64.html\n","description":"","id":1,"section":"posts","tags":["dns64"],"title":"Dns64服务器","uri":"https://www.yaleax.com/posts/dns64/"},{"content":"前提是你的电信运营商已经支持ipv6服务。\n具体配置看下图\n","description":"","id":2,"section":"posts","tags":["k2p"],"title":"K2P老毛子padavan固件 设置开启ipv6","uri":"https://www.yaleax.com/posts/k2ppadavan/"},{"content":"前言 当你想在 vps 里面重新安装一个干净的系统的时候，你就可以用下面的方法来执行。注意看说明，这个不是一键脚本，需要修改参数。\n一键傻瓜式安装 1.示例代码 下面这个是安装 Debian9,密码是: MoeClub.org\n1  bash \u0026lt;(wget --no-check-certificate -qO- \u0026#39;https://moeclub.org/attachment/LinuxShell/InstallNET.sh\u0026#39;) -d 9 -v 64 -a   参照下面的提示,可以安装其他系统和版本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  Usage: bash InstallNET.sh -d/--debian [dist-name] -u/--ubuntu [dist-name] -c/--centos [dist-version] -v/--ver [32/i386|64/amd64] --ip-addr/--ip-gate/--ip-mask -apt/-yum/--mirror -dd/--image -a/-m # dist-name: 发行版本代号 # dist-version: 发行版本号 # -apt/-yum/--mirror : 使用定义镜像 # -a/-m : 询问是否能进入VNC自行操作. -a 为不提示(一般用于全自动安装), -m 为提示.   自定义 IP 安装 1.装依赖组件 1  apt-get install -y xz-utils openssl gawk file   2.查看机子原来ip 1  cat /etc/network/interfaces   3.修改好ip整段丢进终端运行 1 2 3 4 5 6 7 8  wget --no-check-certificate -c http://moeclub.org/attachment/LinuxShell/InstallNET.sh sed -i \u0026#39;s/8.8.8.8/1.1.1.1/g\u0026#39; InstallNET.sh bash InstallNET.sh -d 9 -v amd64 -a \\ -p admin \\ --mirror \u0026#34;http://deb.debian.org/debian/debian\u0026#34; \\ --ip-addr 10.10.10.10 \\ --ip-mask 255.255.255.0 \\ --ip-gate 10.10.10.1   第1行：下载萌咖大佬的脚本\n第2行：改dns为1.1.1.1\n第3行：想安装 debian几，就把数字9改成几。\n第4行：改root预设密码为admin\n第5行：改镜像源\n第6-8行：填写2查看的原 IP 地址  [参考1]：https://github.com/jacyl4/de_GWD\n[参考2]：https://moeclub.org/2018/04/03/603/\n","description":"","id":3,"section":"posts","tags":null,"title":"通过dd 命令给 VPS重装debian系统","uri":"https://www.yaleax.com/posts/dddebian/"},{"content":"一、Doh介绍 DOH全称为DNS-over-HTTPs，顾名思义，其主要目的是使用https协议来进行DNS请求。\n正常的DNS请求过程是通过计算机上的DNS客户端程序来帮助用户发起DNS请求，而不是通过浏览器本身发送，DNS使用的协议是UDP协议，UDP协议不具备很好的安全性，这样发起的DNS请求会遭到DNS劫持，攻击者会将用户想要访问的域名解析到别的IP地址上，因此DOH为了解决这个问题而出现。\nDOH是使用HTTPs协议发送dns请求，请求到达DOH服务器后，由DOH服务器解码HTTPS并发送DNS请求，DNS请求结果返回到DOH服务器上后，再由将其打包成HTTPS返回给客户端，这就保证了客户端发起的dns请求不会被攻击者拿到。\n二、Ubuntu和 debian 系统 1.更新系统 1 2  apt update apt -y upgrade   三、Pihole 1.安装 pihole 1  curl -sSL https://install.pi-hole.net | bash   2.修改 pihole 配置文件 1 2  rm /etc/dnsmasq.d/01-pihole.conf nano /etc/dnsmasq.d/01-pihole.conf   3.Pihole的配置文件 addn-hosts=/etc/pihole/gravity.list addn-hosts=/etc/pihole/black.list addn-hosts=/etc/pihole/local.list localise-queries no-resolv #log-queries log-facility=/var/log/pihole.log local-ttl=2 log-async domain-needed bogus-priv server=1.1.1.1 server=8.8.8.8 server=1.0.0.1 server=8.8.4.4 interface=ens3 4.重新启动 pihole 并查看状态 1 2  pihole restartdns pihole status   四、Lighttpd 1.修改lighttpd配置文件 1  nano /etc/lighttpd/lighttpd.conf   2.修改server.port值 vim /etc/lighttpd/lighttpd.conf #找到以下字段，修改server.port值 ... server.groupname = \u0026quot;www-data\u0026quot; server.port = 9090 accesslog.filename = \u0026quot;/var/log/lighttpd/access.log\u0026quot; ... 3.重启 lighttpd 1  systemctl restart lighttpd   4.更改管理员密码 1  pihole -a -p   访问 http://youip:9090/admin\n五、DNS-over-HTTPs 1.安装DNS-over-HTTPs服务器 1 2  wget https://github.com/yaleax/yaleax/releases/download/doh-server/doh-server_2.0.1_amd64.deb sudo dpkg -i doh-server_2.0.1_amd64.deb   2.修改DNS-over-HTTPs配置 1 2  rm nano /etc/dns-over-https/doh-server.conf nano /etc/dns-over-https/doh-server.conf   3.DNS-over-HTTPs的配置文件 listen = [ \u0026quot;127.0.0.1:8053\u0026quot;, ] path = \u0026quot;/\u0026quot; upstream = [ \u0026quot;127.0.0.1:53\u0026quot;, ] timeout = 10 tries = 3 verbose = false log_guessed_client_ip = false 4.重新启动DNS-over-HTTPs并重看状态 1 2  systemctl restart doh-server systemctl status doh-server   六、Caddy 默认你已经安装了 Caddy,如果没有安装，可以参考本博客关于 Caddy 的文章。\n1.修改 Caddy 的Caddyfile 文件 1  nano /usr/local/caddy/Caddyfile   2.Caddyfile配置文件 proxy / http://127.0.0.1:8053 { header_upstream Host {host} header_upstream X-Real-IP {remote} header_upstream X-Forwarded-For {\u0026gt;X-Forwarded-For},{remote} header_upstream X-Forwarded-Proto {scheme} } 3.重新启动 Caddy并查看状态 1 2  /etc/init.d/caddy restart /etc/init.d/caddy status   七、参考文章 [Pihole]https://ywnz.com/linuxyffq/4332.html\n[lighttpd]azhuge233.com\n[Doh]https://blog.csdn.net/qq_39378221/article/details/103245108\n[Caddy]https://ning.su/posts/hugo-caddy-v2ray-on-ubuntu/#caddy\n","description":"","id":4,"section":"posts","tags":null,"title":"DOH（DNS-over-HTTPs）服务器搭建","uri":"https://www.yaleax.com/posts/doh/"},{"content":"提醒：手套比口罩更重要！\n发布: 2020年1月30日\n劳里·加勒特（Laurie Garrett）是美国著名女记者，是获得皮博迪奖（The Peabody Award）、乔治 · 伯克奖（George Polk Award）和普利策奖（Pulitzer Award）三大著名新闻奖的第一人。现为美国对外关系委员会全球卫生高级研究员。\n她曾对埃博拉、SARS 等大型传染病和公共健康危机都做过实地考察与深度研究，出版了《失信：全球公共卫生事业之瘫痪》《流行天下！传染病的世界》《逼近的瘟疫》等多部关于传染病与公共卫生的著作。\n对于这一次的2019-nCoV病毒带来的恐慌，她撰文讲述了自己面对传染病的经验与知识，以及10个在疫情期间保护自己的预防措施，来看看吧——\n01. When you leave your home, wear gloves—winter mittens or outdoor gloves—and keep them on in subways, buses, and public spaces.\n出门离家时，戴上手套——冬天的手套或是户外手套都可以——任何公共场合包括地铁，公交都不要脱下来。\n02. If you are in a social situation where you should remove your gloves, perhaps to shake hands or dine, do not touch your face or eyes, no matter how much something itches. Keep your hands away from contact with your face. And before you put your gloves back on, wash your hands thoroughly with soap and warm water, scrubbing the fingers. Put your gloves on.\n在某些需要脱下手套的社交场合，比如握手和吃饭时，不要用手接触你的脸或眼睛，不管有多痒都不要让你的手接触你的脸。在戴回手套前，用温水和肥皂仔细洗手，好好搓洗手指，再戴上手套。\n03. Change gloves daily, washing them thoroughly, and avoid wearing damp gloves.\n每天更换手套，仔细清洗。不要戴潮湿的手套。\n04. Masks are useless when worn outdoors and may not be very helpful even indoors. Most masks deteriorate after one or two wearings. Using the same mask day after day is worse than useless—it’s disgusting, as the contents of your mouth and nose eventually coat the inside of the mask with a smelly veneer that is attractive to bacteria. I rarely wear a face mask in an epidemic, and I have been in more than 30 outbreaks.\n口罩使用一次很有必要。重复使用，则口罩在户外佩戴时毫无用处，即使在室内用处也不大。大多口罩在被使用一两次后就被污染了，重复同一口罩比不戴口罩更糟糕。因为从你嘴和鼻子的呼出的物质最终会在口罩内部形成一层十分滋养细菌的，发臭的膜。在传染病流行期间我很少重复戴口罩，我曾经经历过这种状况超过30次。\nInstead, I stay away from crowds, and I keep my distance from individual people—a half meter, about 1.5 feet, is a good standard. If someone is coughing or sneezing, I ask them to put on a mask—to protect me from their potentially contaminated fluids. If they decline, I step a meter (about 3 feet) away from them, or I leave. Don’t shake hands or hug people—politely beg off, saying it’s better for both of you not to come in close contact during an epidemic.\n相反，我会远离人群，并且与个人保持距离——差不多半米左右是比较好的标准。要是有人咳嗽或是打喷嚏，我会请他们戴上口罩，来保护我免受潜在的有污染的液体伤害。如果他们拒绝，我会走到一米的距离之外，或者干脆离开。不要与人握手或拥抱，告诉对方在传染病流行期间不要靠太近，这对彼此都好。\n05. Inside your household, remove all of the towels from your bathrooms and kitchen immediately, and replace them with clean towels that have the names of each family member on them. Instruct everybody in your home to only use their own towels and never touch another family member’s. Wash all towels twice a week. Damp towels provide terrific homes for viruses, like common colds, flus, and, yes, coronaviruses.\n在家里要马上给浴室和厨房都换上干净的毛巾，让家里每个人都用自己的专属毛巾，不去触碰别人的。每周洗两次毛巾。湿毛巾会为病毒滋生提供温床，例如普通感冒，流感，以及冠状病毒。\n06. Be careful with doorknobs. If it’s possible to open and close doors using your elbows or shoulders, do so. Wear gloves to turn a doorknob—or wash your hands after touching it. If anybody in your home takes sick, wash your doorknobs regularly. Similarly, be cautious with stairway banisters, desktops, cell phones, toys, laptops—any objects that are hand-held.\n小心门把手，最好用肘部或肩膀去开关门。戴手套去拧门把手，或者在触摸了门把手后去洗手。如果家里有病人，定期清洁门把手。同样，对待楼梯扶手，桌面，手机，玩具，笔记本电脑等任何手持物体都要小心谨慎。\nAs long as you handle only your own personal objects, you will be ok—but if you need to pick up someone else’s cell phone or cooking tools or use someone else’s computer keyboard, be mindful of not touching your face and wash your hands immediately after touching the object.\n只要你只接触自己的私人物品，就没什么问题。但是，如果你需要使用别人的手机，厨具或电脑键盘，请注意不要触摸脸部，并在触摸物体后立即去洗手。\n07. If you share meals, do not use your personal chopsticks and utensils to remove food from a serving bowl or plate and, of course, tell your children to never drink out of anybody else’s cups or from a container of shared fluid. Place serving spoons in each dish and instruct everybody at the table to scoop what they want from the serving dishes onto their personal plates or bowls, return the serving spoon to the main dish, and then use their personal chopsticks only to pick food from their personal plate or bowl into their mouth.\n吃饭时，不要用你自己的筷子和餐具去公碗和盘子里夹菜。也要告诉你的孩子不要喝别人杯子或者容器里的水。在席上让每个人使用公勺将盘子里的菜夹到自己的盘子或者碗里，然后将公勺放回公盘，然后用自己的筷子将自己盘子或者碗里的食物送进嘴里。\nWash all food and kitchenware thoroughly between meals and avoid restaurants that have poor hygiene practices.\n饭前仔细清洗食物，饭后仔细清洗餐具，不要去卫生条件不好的餐馆用餐。\n08. Absolutely do not buy, slaughter, or consume any live animal or fish until it is known what species was the source of the virus.\n在病毒传播源被发现之前，绝对不要购买，屠宰，或是食用任何生鲜动物和鱼类。\n09. When the weather allows, open your windows at home or work, letting your space air out. The virus cannot linger in a well-ventilated space. But of course, if it is cold or the weather is inclement, keep warm and close those windows.\n天气条件允许的情况下，打开家里或办公室的窗户，让室内空气流通，病毒无法在通风条件良好的空间里停留。当然，如果天气严寒，就关窗保暖。\n10. Finally, if you are caring for a friend or family member who is running a fever, always wear a tight-fitting mask when you are near them, and place one on the ailing person (unless they are nauseated).\n最后，如果你在照顾得病的朋友或家人，在靠近他们时，一定要时刻佩戴与面部紧贴的口罩，并给他们也戴上（除非他们感到恶心）。\nWhen you replace an old, dirty mask from the face of your friend or loved one be very, very careful—assume, for the sake of your protection, that it is covered in viruses, and handle it while wearing latex gloves, place it inside of a disposable container, seal it, and then put it in the trash. While wearing those latex gloves, gently wash the patient’s face with warm soap and water, using a disposable paper towel or cotton swab, and seal it after use in a container or plastic bag before placing it in your household trash.\n当你帮忙从朋友或亲人的脸上摘除使用过的脏口罩时，请务必要非常小心——为了保护自己，你必须假设该口罩已被病毒覆盖，戴上乳胶手套去进行处理，将其放进可丢弃的包装袋内，密封好，然后再丢进垃圾桶。戴上乳胶手套为患者用纸巾和棉球轻轻地用肥皂和温水清洗患者的面部，并在使用后将其密封好装入包装袋或塑料袋中，然后再丢进家里的垃圾箱。\nWear long-sleeved shirts and clothing that covers your body when you are caring for your ailing friend or relative. Clean everything your patient wears or touches very thoroughly in hot soapy water, including sheets, towels, and utensils.\n在照顾生病的朋友或家人时，要穿上能包裹全身的长袖衣物。用热肥皂水彻底清洗患者所穿过的衣物和接触的所有物品，包括床单，毛巾和器皿。\nIf you have space, isolate the sick person in your household in a room, or a corner of a room, where they are comfortable, but separated from the rest of the household. If the weather is tolerable, open a window that is on the opposite side of the room, so that air gently blows past the patient’s face and then outdoors. Of course, don’t do this if it is very cold, as your friend or loved one will be made sicker if uncomfortably cold.\n如果你家里有足够的空间，为病人隔离出一个房间或房间的一角，让他们感到舒适的同时又与家庭中的其他人分开。如果天气适宜，打开房间另一侧的窗户，这样空气能轻轻吹过患者的面部后，流动吹到室外。当然，如果天气很冷就不要这样做，因为你的朋友和家人可能会因寒冷而病情加重。\nThe Chinese government will take very drastic actions over the next few weeks, and this will be a time of hardship for the Chinese people. But with these simple precautions, if taken by everybody in your household, building, office, and school, you will dramatically reduce the spread of the virus and bring the outbreak to its knees. Be safe. Do not panic.\n中国政府将在接下来的几周内采取更严厉的措施，这对中国人民来说将是一个艰难的时期。但是，有了这些简单的预防措施，只要大家在家里，建筑物里，办公室和学校里都采取这些简单的预防措施。就能大大减少该病毒的传播风险，并遏制疫情爆发。\nTake commonsense precautions. As frightening as this time is, you will get through it.\n注意安全。不要惊慌。采取一些常识性的预防措施。眼下的状况虽然可怕，但你一定会渡过难关。\n原文摘自英语世界\n","description":"","id":5,"section":"note","tags":null,"title":"手套比口罩更重要！","uri":"https://www.yaleax.com/note/%E6%89%8B%E5%A5%97%E6%AF%94%E5%8F%A3%E7%BD%A9%E6%9B%B4%E9%87%8D%E8%A6%81/"},{"content":"简介 File Browser 是一个基于 Web 的文件管理器。它可以使你随时随地的对设备的文件进行基本的管理操作，如：创建、删除、移动、复制等。它除了可以让你进行文件管理之外，还有一些其他的功能。它支持多个用户的管理，而且每个用户可以拥有自己可以访问的文件和权限。它还支持文件分享，就行网盘那样，你可以通过它来向你的朋友分享文件。你还可以用它来执行一些 Linux 命令，比如你想要在当前目录下克隆一个代码库，就可以用它来执行git等命令。\n1.安装 Filebrowser 1  curl -fsSL https://filebrowser.xyz/get.sh | bash   安装目录：/usr/local/bin/filebrowser\n2.创建 Filebrowser配置文件 1 2 3  mkdir /etc/filebrowser mkdir /etc/filebrowser/filebrowser nano /etc/filebrowser/filebrowser.json   3.配置文件 1 2 3 4 5 6 7 8  { \u0026#34;port\u0026#34;: 18888, \u0026#34;baseURL\u0026#34;: \u0026#34;/admin\u0026#34;, //后缀名字例如：www.yale.ga/admin \u0026#34;address\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;log\u0026#34;: \u0026#34;stdout\u0026#34;, \u0026#34;database\u0026#34;: \u0026#34;/var/www/yale/database.db\u0026#34;, //数据存放地址 \u0026#34;root\u0026#34;: \u0026#34;/var/www/yale\u0026#34; //你想管理的目录 }   4.设置系统服务 1  nano /etc/systemd/system/filebrowser.service   5.系统服务配置文件 1 2 3 4 5 6 7 8 9 10  [Unit] Description=File Browser After=network.target [Service] ExecStart=/usr/local/bin/filebrowser -c /etc/filebrowser/filebrowser.json [Install] WantedBy=multi-user.target   6.重新载入 system 1  systemctl daemon-reload   7.服务管理 1 2 3 4  状态：systemctl status filebrowser 启动：systemctl start filebrowser 停止：systemctl stop filebrowser 重启：systemctl restart filebrowser   8.登录地址 http://你的ip:1888/admin\n帐号:admin\n密码:admin\n9.启动 https 启动 https后面会介绍，利用 Caddy 反代,添加一句，后面 Caddy 配置文件我会加进去。\nproxy /admin 127.0.0.1:18888\n10.通过 caddy 建立 ssl 1 2 3 4 5 6 7 8 9  www.yale.ga { gzip tls 123456212@mail.com log /var/log/caddy/access.log root /var/www/yale/public proxy /admin 127.0.0.1:18888 \\\\反代 filebreowser }   [参考1]https://ljc.space/post/website-caddy-hugo-filebrowser/\n[参考2]https://233blog.com/post/26/\n[参考3]https://www.mivm.cn/filebrowser/\n","description":"","id":6,"section":"posts","tags":null,"title":"Filebrowser","uri":"https://www.yaleax.com/posts/filebrowser/"},{"content":"一、前言 俗话说：『一如电信深似海，从此小鸡不好买。』\n家里是中国电信的网络，为了能跑满宽带（100M），不断尝试买不同的小鸡，通过试验，发现速度是CN2 GIA \u0026gt;CN2 \u0026gt; 163。家里是电信网络的人，选小鸡一定要上CN2，不要心存幻想。如果你是联通网络，那么恭喜你，随便买吧，都不会太差。\n或者你不认命，用国内联通 nat 小鸡中转一下？这个教程是当时折腾国内中转方案的时候用到的转发方法，现在分享给你。\n二、iptables 1.安装 iptables 1 2 3 4 5 6 7 8  #停止防火墙 systemctl stop firewalld.service #关闭防火墙 systemctl disable firewalld.service #通过 yum 安装 iptables yum install iptables-services -y #启动 iptables systemctl enable iptables.service   2.开启端口转发功能 1 2 3 4  #添加net.ipv4.ip_forward = 1到cloudiplc.conf echo \u0026#34;net.ipv4.ip_forward = 1\u0026#34; \u0026gt;\u0026gt; /usr/lib/sysctl.d/cloudiplc.conf #启动cloudiplc.conf sysctl -p /usr/lib/sysctl.d/cloudiplc.conf   三、iptales 规则 请根据自己的需求选择\n1.同端口号配置方案 使用本地服务器的10000端口来转发目标IP为1.1.1.1的10000端口\n1 2 3 4  -A PREROUTING -p tcp -m tcp --dport 10000 -j DNAT --to-destination 1.1.1.1 -A PREROUTING -p udp -m udp --dport 10000 -j DNAT --to-destination 1.1.1.1 -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 10000 -j SNAT --to-source 本地服务器IP -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 10000 -j SNAT --to-source 本地服务器IP   2.非同端口号配置方案 使用本地服务器的60000端口来转发目标IP为1.1.1.1的50000端口\n1 2 3 4  -A PREROUTING -p tcp -m tcp --dport 60000 -j DNAT --to-destination 1.1.1.1:50000 -A PREROUTING -p udp -m udp --dport 60000 -j DNAT --to-destination 1.1.1.1:50000 -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 50000 -j SNAT --to-source 本地服务器IP -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 50000 -j SNAT --to-source 本地服务器IP   3.多端口转发配置方案 将本地服务器的10000~65535转发至目标IP为1.1.1.1的10000~65535端口\n1 2 3 4  -A PREROUTING -p tcp -m tcp --dport 10000:65535 -j DNAT --to-destination 1.1.1.1 -A PREROUTING -p udp -m udp --dport 10000:65535 -j DNAT --to-destination 1.1.1.1 -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 10000:65535 -j SNAT --to-source 本地服务器IP -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 10000:65535 -j SNAT --to-source 本地服务器IP   四、保存并重启 1 2 3 4  #保存 service iptables save #重启 service iptables restart   五、完成 ​🎉​ 祝你好运。\n[参考1]https://www.cloudiplc.com/knowledgebase.php?action=displayarticle\u0026amp;id=9\n[参考2]https://moe.best/vps-domain/cloudiplc-nat.html\n","description":"","id":7,"section":"posts","tags":null,"title":"通过iptables实现国内 nat的IP端口数据包转发服务","uri":"https://www.yaleax.com/posts/%E9%80%9A%E8%BF%87%E5%9B%BD%E5%86%85-nat-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E8%BD%AC%E6%9D%A5%E8%BE%BE%E5%88%B0%E5%8A%A0%E9%80%9F%E7%9A%84%E7%9B%AE%E7%9A%84/"},{"content":"一、必要条件 已有公网ip，或已经内网穿透。\n二、操作 1.找到端口转发 高级设置-外部网络(Wan)-端口转发(UPnP)\n2.设置端口转发  服务名称：随便写 源IP地址：... 端口范围：需要转发的端口 内网IP：需要转发的设备ip 本地端口：和上面一样 协议：根据服务类型选择，不知道就2个都选  三、完成 🎉祝好运。\n[参考]https://www.right.com.cn/forum/thread-194017-1-1.html\n","description":"","id":8,"section":"posts","tags":null,"title":"K2p老毛子/padavan/pdcn/华硕固件，端口映射、端口转发方法。","uri":"https://www.yaleax.com/posts/%E5%8D%8E%E7%A1%95%E8%80%81%E6%AF%9B%E5%AD%90%E5%9B%BA%E4%BB%B6%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E6%96%B9%E6%B3%95/"},{"content":"一、前言 纯属抄袭！在去原创之前，可以先把 vps 连接上 google drive，教程在这里。\n二、emby 1.安装 1  docker run --name=emby -d -v /root/emby/config:/config -v /root/rclone:/clone -p 8096:8096 -p 8920:8920 -e UID=1000 -e GID=100 -e GIDLIST=100 --restart unless-stopped emby/embyserver:latest   三、访问 http://youip:8096\n","description":"","id":9,"section":"posts","tags":null,"title":"VPS 上面安装 emby 服务器并连接 google drvie","uri":"https://www.yaleax.com/posts/vps-%E4%B8%8A%E9%9D%A2%E5%AE%89%E8%A3%85-emby-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E8%BF%9E%E6%8E%A5-google-drvie/"},{"content":"一、De_GWD介绍 1.名字解析 理解了名字，你其实也就能知道这套系统是干什么的了。\n De: Debian系统，linux 的一个分支。 GW: gateway，中文网关，负责中转国内国外流量。 D: DNS,域名解析系统，对抗 DNS 域名污染。  2.功能  科学上网方案：V2ray tls 1.3 ws 境外 DNS 解析方案：Pi-hole and DNS-over-HTTPs 国内 DNS 解析方案：SmartDNS VPN方案：WireGuard 内网分流 CloudFlare DDNS  3.客户端界面 3.工作原理 二、在境外服务器上安装De_GWD 1.选择 debian系统 已有系统可以一键 dd 成 debian9\n1  bash \u0026lt;(wget --no-check-certificate -qO- \u0026#39;https://moeclub.org/attachment/LinuxShell/InstallNET.sh\u0026#39;) -d 9 -v 64 -a -firmware﻿   ssh root@你的 ip 地址\n密码：MoeClub.org\n2.安装 1  apt-get install ca-certificates   安装 bbrplush\n先选择2安装 bbr，安装好后会重启，重启后再次执行下面的标本，选址1，输入域名后，就全自动安装了。\n1  bash \u0026lt;(wget --no-check-certificate -qO- https://raw.githubusercontent.com/jacyl4/de_GWD/master/server)   3.配置参数 全自动安装，选择1\n三、在 N1上安装De_GWD 安装 1.在 N1上安装Debian系统 [N1参考]https://yuerblog.cc/2019/10/23/%e6%96%90%e8%ae%afn1-%e5%ae%8c%e7%be%8e%e5%88%b7%e6%9c%baarmbian%e6%95%99%e7%a8%8b/\n2.在 Debian安装 De_GWD 先安装必备软件\n1 2 3  apt update apt upgrade apt install -y dhcpcd5 lighttpd php-common php-cgi php-sqlite3 dhcpcd5 lighttpd php-common php-cgi php-sqlite3   全自动安装，选择1，安装速度挺慢的，最好是挂梯子安装。\n1 2  apt install -y wget bash \u0026lt;(wget --no-check-certificate -qO- http://xznat.seso.icu:10178/client_do)   3.配置参数 de_GWD local IP address：本机 ip 地址\nUpstream route IP address：上级路由器 IP 地址\n四、完成 好多信息没写，你很难成功。好像配置都是口口相传的，所以，你去群里面问吧。\n[N1刷机教程参考]https://yuerblog.cc/2019/10/23/%e6%96%90%e8%ae%afn1-%e5%ae%8c%e7%be%8e%e5%88%b7%e6%9c%baarmbian%e6%95%99%e7%a8%8b/ [De_WGD项目地址]https://github.com/jacyl4/de_GWD [安装De_WGD教程]https://jacyl4.github.io/post/debian-gateway/ [类似项目]https://github.com/wi1dcard/kexue-gateway\n","description":"","id":10,"section":"posts","tags":null,"title":"N1盒子Armbian 5.98,安装 De_gwd，最快速的科学上网方案。","uri":"https://www.yaleax.com/posts/n1%E7%9B%92%E5%AD%90%E5%AE%89%E8%A3%85-armbian-5-99-%E5%B9%B6%E5%AE%89%E8%A3%85-de_gwd/"},{"content":"有人已经写的挺好了，我为啥还要写？\n去教程!\n一、前言 如果那个教程没有了，该怎么办？还是备份一下吧，照抄！重新排版！\n二、必要条件 这个应该是 Ubuntu/Debian 系统比较实用，别的系统命令有细微差别。\n三、rclone 1.安装 rclone 1  curl https://rclone.org/install.sh | sudo bash   2.开始配置 1  rclone config   3.详细配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159  n) New remote s) Set configuration password q) Quit config n/s/q\u0026gt; n #输入n回车，新建配置 name\u0026gt; GD #新建配置的名称，随意填写，后面会用到 Type of storage to configure. Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). Choose a number from below, or type in your own value 1 / 1Fichier \\ \u0026#34;fichier\u0026#34; 2 / Alias for an existing remote \\ \u0026#34;alias\u0026#34; 3 / Amazon Drive \\ \u0026#34;amazon cloud drive\u0026#34; 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc) \\ \u0026#34;s3\u0026#34; 5 / Backblaze B2 \\ \u0026#34;b2\u0026#34; 6 / Box \\ \u0026#34;box\u0026#34; 7 / Cache a remote \\ \u0026#34;cache\u0026#34; 8 / Dropbox \\ \u0026#34;dropbox\u0026#34; 9 / Encrypt/Decrypt a remote \\ \u0026#34;crypt\u0026#34; 10 / FTP Connection \\ \u0026#34;ftp\u0026#34; 11 / Google Cloud Storage (this is not Google Drive) \\ \u0026#34;google cloud storage\u0026#34; 12 / Google Drive \\ \u0026#34;drive\u0026#34; 13 / Google Photos \\ \u0026#34;google photos\u0026#34; 14 / Hubic \\ \u0026#34;hubic\u0026#34; 15 / JottaCloud \\ \u0026#34;jottacloud\u0026#34; 16 / Koofr \\ \u0026#34;koofr\u0026#34; 17 / Local Disk \\ \u0026#34;local\u0026#34; 18 / Mega \\ \u0026#34;mega\u0026#34; 19 / Microsoft Azure Blob Storage \\ \u0026#34;azureblob\u0026#34; 20 / Microsoft OneDrive \\ \u0026#34;onedrive\u0026#34; 21 / OpenDrive \\ \u0026#34;opendrive\u0026#34; 22 / Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \u0026#34;swift\u0026#34; 23 / Pcloud \\ \u0026#34;pcloud\u0026#34; 24 / Put.io \\ \u0026#34;putio\u0026#34; 25 / QingCloud Object Storage \\ \u0026#34;qingstor\u0026#34; 26 / SSH/SFTP Connection \\ \u0026#34;sftp\u0026#34; 27 / Union merges the contents of several remotes \\ \u0026#34;union\u0026#34; 28 / Webdav \\ \u0026#34;webdav\u0026#34; 29 / Yandex Disk \\ \u0026#34;yandex\u0026#34; 30 / http Connection \\ \u0026#34;http\u0026#34; 31 / premiumize.me \\ \u0026#34;premiumizeme\u0026#34; Storage\u0026gt; 12 #选择需要挂载的网盘 ** See help for drive backend at: https://rclone.org/drive/ ** Google Application Client Id Setting your own is recommended. See https://rclone.org/drive/#making-your-own-client-id for how to create your own. If you leave this blank, it will use an internal key which is low performance. Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). client_id\u0026gt; #默认直接回车，或者输入自己的OAuth ID Google Application Client Secret Setting your own is recommended. Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). client_secret\u0026gt; #默认直接回车，或者输入自己的OAuth秘锁 Scope that rclone should use when requesting access from drive. Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). Choose a number from below, or type in your own value 1 / Full access all files, excluding Application Data Folder. \\ \u0026#34;drive\u0026#34; 2 / Read-only access to file metadata and file contents. \\ \u0026#34;drive.readonly\u0026#34; / Access to files created by rclone only. 3 | These are visible in the drive website. | File authorization is revoked when the user deauthorizes the app. \\ \u0026#34;drive.file\u0026#34; / Allows read and write access to the Application Data folder. 4 | This is not visible in the drive website. \\ \u0026#34;drive.appfolder\u0026#34; / Allows read-only access to file metadata but 5 | does not allow any access to read or download file content. \\ \u0026#34;drive.metadata.readonly\u0026#34; scope\u0026gt; 1 #默认输入1回车 ID of the root folder Leave blank normally. Fill in to access \u0026#34;Computers\u0026#34; folders. (see docs). Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). root_folder_id\u0026gt; #默认直接回车 Service Account Credentials JSON file path Leave blank normally. Needed only if you want use SA instead of interactive login. Enter a string value. Press Enter for the default (\u0026#34;\u0026#34;). service_account_file\u0026gt; Edit advanced config? (y/n) y) Yes n) No y/n\u0026gt; n #是否编辑高级配置，输入n回车 Remote config Use auto config? * Say Y if not sure * Say N if you are working on a remote or headless machine y) Yes n) No y/n\u0026gt; n #是否使用自动配置，输入n回车 If your browser doesn\u0026#39;t open automatically go to the following link: https://accounts.google.com/o/oauth2/XXX Log in and authorize rclone for access Enter verification code\u0026gt; XXXX #复制上面的链接在浏览器中打开，将得到的授权码复制到这里后回车 Configure this as a team drive? y) Yes n) No y/n\u0026gt; y #是否挂载团队网盘，如果没有输入n回车，需要挂载团队版输入y回车 Fetching team drive list... Choose a number from below, or type in your own value 1 / SunPma \\ \u0026#34;0ADYACmKjlU3JUk9PVA\u0026#34; Enter a Team Drive ID\u0026gt; 1 #选择你需要挂载的团队盘然后回车 -------------------- [SUNPMAGD] type = drive scope = drive token = {\u0026#34;access_token\u0026#34;:\u0026#34;XXX\u0026#34;,\u0026#34;expiry\u0026#34;:\u0026#34;2019-10-23T14:32:06.481207275+08:00\u0026#34;} team_drive = 0ADYACmKjlU3JUk9PVA -------------------- y) Yes this is OK e) Edit this remote d) Delete this remote y/e/d\u0026gt; y #默认输入y回车 Current remotes: Name Type ==== ==== SUNPMAGD drive e) Edit existing remote n) New remote d) Delete remote r) Rename remote c) Copy remote s) Set configuration password q) Quit config e/n/d/r/c/s/q\u0026gt; q #输入q回车，保存配置退出   4.新建本地挂载文件夹 1 2 3 4 5  cd /root mkdir emby mkdir emby/config mkdir rclone mkdir rclone/ldfdsa00   #/usr/bin/rclone mount DriveName:Folder LocalFolder\n下面整体代码中最上面的这条需要自己修改，不要直接复制，注意代码中有空格 DriveName #配置时填写的name Folder #网盘里要挂载的文件夹名 LocalFolder #本地要挂载的文件夹绝对路径 例：/usr/bin/rclone mount GD:VPS /home/GoogleDrive \\  5.挂载 1  rclone mount ldfdsa00: /root/rclone/ldfdsa00 --buffer-size 1G --vfs-read-chunk-size 256M --vfs-read-chunk-size-limit 2G --allow-non-empty --allow-other --dir-cache-time 12h \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;   6.开机自动启动 1 2  nano /etc/crontab @reboot root rclone mount ldfdsa00: /root/rclone/ldfdsa00 --buffer-size 1G --vfs-read-chunk-size 256M --vfs-read-chunk-size-limit 2G --allow-non-empty --allow-other --dir-cache-time 12h \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;   6.1重新挂在 如果有问题，可以选择重新挂在\n1 2  umount /root/rclone/ldfdsa00 #卸载源目录 rclone mount gd（换成新账号，内部目录要匹配）: /root/rclone/ldfdsa00 --buffer-size 1G --vfs-read-chunk-size 256M --vfs-read-chunk-size-limit 2G --allow-non-empty --allow-other --dir-cache-time 12h \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp; #重新挂载   [参考1]https://wzfou.com/rclone-cos-fuse-ossfs/\n[参考2]https://sunpma.com/567.html\n[参考3]http://dxz.plus/index.php/2019/11/03/10.html\n","description":"","id":11,"section":"posts","tags":null,"title":"VPS连接 Google Drive","uri":"https://www.yaleax.com/posts/vps%E8%BF%9E%E6%8E%A5-google-drive/"},{"content":"一、前言 之前写了一个教程是利用 Caddy 自动获得证书得，最近总是失败，所以就选择手动获取，然后再配置 Caddy。首先我们需要从证书授权机构(以下简称 CA ) 处获取一个证书，Let\u0026rsquo;s Encrypt 就是一个 CA。\nLet\u0026rsquo;s Encrypt 是一个免费、开放，自动化的证书颁发机构，Caddy自动申请得也是这家。\nCertbot 是 Let’s Encrypt 官方推荐的证书生成客户端工具\n二、教程 1.安装 Cerbot 1 2 3 4 5  # 下载 Certbot 客户端 wget https://dl.eff.org/certbot-auto # 设为可执行权限 chmod a+x certbot-auto   2.申请通配符证书 Let’s Encrypt目前支持三种验证方式：\n dns-01：给域名添加一个 DNS TXT 记录。 http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。 tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。  下面以 dns验证方式为例\n1  ./certbot-auto certonly -d \u0026#34;*.xxx.com\u0026#34; --manual --preferred-challenges dns-01 --server https://acme-v02.api.letsencrypt.org/directory   1.申请通配符证书，只能使用 dns-01 的方式。\n2.xxx.com 请根据自己的域名自行更改。  等待安装一些相关环境文件，接下来的操作参考下面得图片\n3.更改dnstxt 测试验证\ndig -t txt _acme-challenge.xxx.com@8.8.8.8 确认生效后，回车\u0008\u0008继续执行，最后会输出如下内容：\nIMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/xxx.com/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/xxx.com/privkey.pem Your cert will expire on 2018-06-12. To obtain a new or tweaked version of this certificate in the future, simply run certbot-auto again. To non-interactively renew *all* of your certificates, run \u0026quot;certbot-auto renew\u0026quot; - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le 到了这一步后，恭喜您，证书申请成功。 证书和密钥保存在下列目录：\ntree /etc/letsencrypt/live/xxx.com/ . ├── cert.pem ├── chain.pem ├── fullchain.pem └── privkey.pem 校验证书信息，输入如下命令：\nopenssl x509 -in /etc/letsencrypt/live/xxx.com/cert.pem -noout -text # 可以看到证书包含了 SAN 扩展，该扩展的值就是 *.xxx.com ... Authority Information Access: OCSP - URI:http://ocsp.int-x3.letsencrypt.org CA Issuers - URI:http://cert.int-x3.letsencrypt.org/ X509v3 Subject Alternative Name: DNS:*.xxx.com ... 到此，我们就演示了如何在 Let’s Encrypt 申请免费的通配符证书。\n三、Caddy 配置 1 2 3 4 5 6  example.moe gzip log /var/log/caddy/access.log tls /etc/ssl/cert.pem /etc/ssl/key.pem root /var/www/   [参考1]https://youlu.tk/#header-n703\n","description":"","id":12,"section":"posts","tags":["Caddy","证书"],"title":"使用 Certbot手动获取 Let's Encrypt 免费证书Caddy手动配置证书","uri":"https://www.yaleax.com/posts/%E4%BD%BF%E7%94%A8-certbot%E6%89%8B%E5%8A%A8%E8%8E%B7%E5%8F%96-lets-encrypt-%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6caddy%E6%89%8B%E5%8A%A8%E9%85%8D%E7%BD%AE%E8%AF%81%E4%B9%A6/"},{"content":"一、前言 这是一个媲美 Surge 的代理客户端，免费、简洁的界面，支持 SS、V2Ray、SOCKS5 协议、支持规则分流和屏蔽广告（类似 Surge 的规则），支持托管订阅。\n二、必要条件 1. linux服务器一台 三、安装Clash到 Linux 系统上 1. 下载并安装Clash 1 2 3 4 5 6 7 8 9 10  进入当前用户根目录 cd ~ #下载二进制文件 wget https://github.com/Dreamacro/clash/releases/download/v0.16.0/clash-linux-amd64-v0.16.0.gz #使用 gzip 解压 gzip -d clash-linux-amd64-v0.16.0.gz #移动到bin mv clash-linux-amd64-v0.16.0 /usr/local/bin/clash #添加执行权限 chmod +x /usr/local/bin/clash   2.配置Clash启动服务 1  nano /etc/systemd/system/clash.service   把下面的信息复制进去\n1 2 3 4 5 6 7 8 9 10 11 12  [Unit] Description=clash service After=network.target [Service] Type=simple User=root ExecStart=/usr/local/bin/clash Restart=on-failure # or always, on-abort, etc [Install] WantedBy=multi-user.target   3.设置 Clash 开机自启 1 2  systemctl daemon-reload systemctl enable clash   service clash start # 启动 service clash stop # 停止\nservice clash restart # 重启\nservice clash status # 状态  4.下载 dashboard 控制面板 1 2 3 4 5 6 7 8 9 10  # 创建 .config目录 mkdir .config # 创建 clash 目录 mkdir ~/.config/clash # 下载 dashboard wget https://github.com/haishanh/yacd/archive/gh-pages.zip # 用 unzip解压缩 unzip gh-pages.zip # 把文件改名层 dashboard mv yacd-gh-pages/ ~/.config/clash/dashboard/   5.配置 Clash 文件 1 2 3 4 5  # 进入配置文件目录 cd ~/.config/ # 编辑 Clash 配置文件config.yaml nano config.yaml   [去 GitHub 自己复制吧]https://github.com/ConnersHua/Profiles/edit/master/Clash/Pro.yaml  6.启动前 配置文件里面的加密是重点\n7.启动 Clash 1  service clash start   8.🎉 完成 访问http://serverip:9090/ui/ 试试吧\n四、通过V2ray访问已安装Clash的服务器 v2ray配置如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  { \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 30123, \u0026#34;listen\u0026#34;:\u0026#34;127.0.0.1\u0026#34;, //只监听 127.0.0.1，避免除本机外的机器探测到开放了 30123 端口 \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;b831381d-6324-4d53-ad4f-8cda48b30811\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/ray30123\u0026#34; } } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;settings\u0026#34;: { \u0026#34;servers\u0026#34;: [{ \u0026#34;address\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;port\u0026#34;: 7891, \u0026#34;auth\u0026#34;: \u0026#34;noauth\u0026#34; }] } } ] }   在线 json 编辑器 五、关闭端口 1 2 3 4 5  #打开端口 iptables -A INPUT -p $port -j ACCEPT #关闭端口 iptables -A INPUT -p $port -j DROP   [参考1]https://breakertt.moe/2019/08/20/clash_gateway/index.html [参考2]https://qust.me/post/678ffe99.html\n","description":"","id":13,"section":"posts","tags":["Clash"],"title":"在 ubuntu服务器上安装Clash ","uri":"https://www.yaleax.com/posts/clash-%E6%95%99%E7%A8%8B/"},{"content":"前言 Google BBR 是一款免费开源的TCP拥塞控制传输控制协议, 可以使 Linux 服务器显著提高吞吐量和减少 TCP 连接的延迟。 [项目地址]https://github.com/google/bbr\n教程 1.修改系统变量 1 2 3  sudo -i echo \u0026#34;net.core.default_qdisc=fq\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf echo \u0026#34;net.ipv4.tcp_congestion_control=bbr\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf   2.保存生效 1  sysctl -p   3.查看内核是否已开启BBR 1  sysctl net.ipv4.tcp_available_congestion_control   显示以下即已开启：\n1  net.ipv4.tcp_available_congestion_control = reno cubic bbr   4.查看BBR是否启动 1  lsmod | grep bbr   显示以下即启动成功：\n1  tcp_bbr 20480 1   🎉 完成！\n","description":"","id":14,"section":"posts","tags":["Linux"],"title":"Ubuntu 18.04快速开启Google BBR","uri":"https://www.yaleax.com/posts/ubuntu-18-04%E5%BF%AB%E9%80%9F%E5%BC%80%E5%90%AFgoogle-bbr/"},{"content":"前言 我修改了Mac电脑的用户名，然后就丢失了 administrator 权限，太奇怪了，找了好久，才解决问题，记录一下。\n解决步骤   重新启动电脑。\n  同时按 Command + S 。\n  一直按住，直到有命令行画面显示。\n  输入命令/sbin/fsck -fy然后按 enter 。\n  输入命令/sbin/mount -uw /然后按 enter 。\n  输入命令rm /var/db/.AppleSetupDone然后按 enter 。\n  最后，输入reboot然后按 enter 电脑会重启。\n  🎉完成 重新开机，你可以重新配置你的 mac 电脑了，祝你好运。\n","description":"","id":15,"section":"posts","tags":["MacOS"],"title":"找回Macbook Pro电脑丢失管理员权限","uri":"https://www.yaleax.com/posts/macbook-pro%E7%94%B5%E8%84%91%E4%B8%A2%E5%A4%B1%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/"},{"content":"前言 使用了Hugo静态博客后，才开始正式使用GitHub，经过一段时间的使用，发现GitHub真好用，现在把一些关键信息记录下来。\nGitHub 1.生成密钥 生成密钥后，需要把密钥复制到GitHub的 SSH keys里\n1  ssh-keygen -t rsa -C \u0026#34;`此处填写你的邮箱地址`\u0026#34;   2.初始化 进入想建立 Git 的文件夹\n1 2 3 4 5  git init git add . git commit -m \u0026#34;first commit\u0026#34; git remote add origin git@github.com:替换成你的 GitHub用户名/3cho.git git push -u origin master   3. 推送更新到远程 GitHub仓库 1 2 3  git add \u0026lt;修改的文件\u0026gt; git commit -m \u0026#34;填写更新备注\u0026#34; git push   4. 下载远程 GitHub 仓库的更新 1  git pull   1 2 3 4  hugo -D git add docs git commit -m \u0026#34;up\u0026#34; git push   GitHub命令速查表 ","description":"","id":16,"section":"posts","tags":["Github"],"title":"Github或 Git命令使用","uri":"https://www.yaleax.com/posts/github%E6%88%96-git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"},{"content":"前言 开通谷歌云免费试用后，发现只能用网页登录服务器，太不方便，所以记录一下解决办法。\n教程 1.切换到 root 1 2  #切换到 root 用户 sudo -i   2.编辑ssh配置文件 1 2  #使用nano编辑 sshd_config 文件 nano /etc/ssh/sshd_config   3.修改以下内容即可 1 2 3  #打开 root 通过密码用户登录 PermitRootLogin yes PasswordAuthentication yes   修改完成后，你需要同时按 ctrl + x来退出,再输入y确认保存，再按enter保存。  4.给root用户密码 输入2次密码\n1  passwd root   5.重启ssh 1 2  #重启 ssh服务 service sshd restart   ","description":"","id":17,"section":"posts","tags":["Linux"],"title":"谷歌云或 ubuntu系统打开 root 用户密码登录服务器","uri":"https://www.yaleax.com/posts/%E8%B0%B7%E6%AD%8C%E4%BA%91%E6%88%96-ubuntu%E7%B3%BB%E7%BB%9F%E6%89%93%E5%BC%80-root-%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"content":"一、原理 Dnsmasq SNIproxy一键脚本，是利用Dnsmasq的DNS将网站解析劫持到SNI proxy反向代理的页面上。\n二、必要条件 1.可以看 Netlify的服务器 2.想要解锁的服务器 三、教程第1部分 在可以看Netlify的服务器上输入下面的命令  ### 1.关闭dnsmasq 1  nano /etc/systemd/resolved.conf   2.修改文件 1  DNSStubListener=no   3.重启服务器 1  reboot   4.安装解锁工具 1  wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh \u0026amp;\u0026amp; bash dnsmasq_sniproxy.sh -i   wget \u0026ndash;no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh \u0026amp;\u0026amp; bash dnsmasq_sniproxy.sh -u  ### 5.重启服务器 ```bash reboot ``` ## 四、教程第2部分 在想要解锁的服务器上输入下面的命令  ### 1.设置 ip 把下面代码里面的 ip 更改成，可以看 netflix 的服务器 ip。 ```bash echo nameserver IP  /etc/resolv.conf ``` ### 2.查看是否成功 如果返回的 ip 是可以看 netflix 的服务器 ip，那么就说明成功了。 ```bash ping -c4 netflix.com ``` 🎉 完成\\ ## 五、后话 后来我发现另外一种解锁思路，现在分享在这里[V2ray路由解锁Netflix](https://blog.mojxtang.com/784/)。 ### 1.原理 在能看Netflix 的机器上安装 ss。在不能看 Netlify 的机器上使用 V2ray 连接能看Netflix 的机器上安装 ss。 ### 2.优点 不占用53端口，所以 nat 机器也可以做为解锁机器了。 3.V2ray配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  { \u0026#34;inbound\u0026#34;: { \u0026#34;port\u0026#34;: 端口, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [{ \u0026#34;id\u0026#34;: \u0026#34;更改\u0026#34;, \u0026#34;alterId\u0026#34;: 90 }] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/store123455\u0026#34; } } }, \u0026#34;outbound\u0026#34;: { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} }, \u0026#34;outboundDetour\u0026#34;: [{ \u0026#34;protocol\u0026#34;: \u0026#34;shadowsocks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;servers\u0026#34;: [{ \u0026#34;address\u0026#34;: \u0026#34;ip\u0026#34;, //shadwosockip \u0026#34;method\u0026#34;: \u0026#34;加密方式\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;密码\u0026#34;, \u0026#34;port\u0026#34;: 端口, \u0026#34;ota\u0026#34;: false }] }, \u0026#34;tag\u0026#34;: \u0026#34;ban\u0026#34; }], \u0026#34;routing\u0026#34;: { \u0026#34;strategy\u0026#34;: \u0026#34;rules\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;AsIs\u0026#34;, \u0026#34;rules\u0026#34;: [{ \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;domain:fast.com\u0026#34;, \u0026#34;domain:netflix.com\u0026#34;, \u0026#34;domain:netflix.net\u0026#34;, \u0026#34;domain:nflxext.com\u0026#34;, \u0026#34;domain:nflxso.net\u0026#34;, \u0026#34;domain:nflxvideo.net\u0026#34;, \u0026#34;domain:nflximg.net\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;ban\u0026#34; }] } } }   六、最后 后来我又发现一个办法可以实现解锁奈飞，并且这个好像更好。所以单独写了一篇文章，有兴趣你可以去看看。Clalsh教程\n","description":"","id":18,"section":"posts","tags":["Netflix","Linux"],"title":"利用Dnsmasq SNIproxy解锁 Netflix在 Ubuntu18.04 服务器上","uri":"https://www.yaleax.com/posts/%E8%A7%A3%E9%94%81-netflix/"},{"content":"前言 Backblaze，免费提供10G的存储空间。因为下载需要收费，所以我们可以利用Cloudflare和Backblaze互访免费的特性，来实现免费图床。\n测试图床\u0026amp;Backblaze存储价格 必要条件  注册 Backblaze 注册 Cloudflare 域名一个  可选项  ShareX for Windows Dropshare for MacOS  教程 驱蚊器喵已经写了教程，还包括如何防止盗链，写的很好，所以我就不用写了，去驱蚊器喵写的教程。\n","description":"","id":19,"section":"posts","tags":null,"title":"使用 Backblaze和Cloudflare Workers搭建可以自定义域名的免费图床 ","uri":"https://www.yaleax.com/posts/hello-world/"},{"content":"一、前言 这个教程绝大部分内容你都可以复制粘贴，但是请仔细阅读代码框里面的备注，也就是#后面的文字。\n🈲必须修改代码里面的参数，否则不可能成功！有问题就留言吧，祝你好运。  二、必要条件 1. Ubuntu服务器 2. 域名 3. 域名绑定服务器的IP 地址 三、Hugo 1.安装 Hugo 先去 Hugo release查看 Hugo的最新版本，用最新版本号替代下面代码里面的0.59.1，你也可以直接复制下面的代码，进行下载和安装。\n1 2 3 4  #使用 wget 下载 hugo wget https://github.com/gohugoio/hugo/releases/download/v0.59.1/hugo_0.59.1_Linux-64bit.deb #使用 dpkg 安装 .deb 文件 sudo dpkg -i hugo_0.59.1_Linux-64bit.deb   2.创建网站存放目录 1 2 3 4 5 6  # 使用 mkdir命令，创建网站目录 mkdir -p /var/www # 使用 cd命令，进入创建的目录 cd /var/www # 新建站点，名字为3cho,你可以替换成自己的名字 hugo new site suan   3.安装主题 如果没有安装 git先安装\n3.1安装 git 1 2  apt-get update apt-get install git   ###3.2 安装主题\n主题可以去Hugo官方主题库下载,本文以 even 主题为例\n1 2 3 4 5 6  # 进入新建好的suan目录 cd /var/www/suan # 安装主题（不同主题安装方式不同） git clone https://github.com/olOwOlo/hugo-theme-even themes/even #复制主题自带的 config.toml文件到当前根目录 cp themes/even/exampleSite/config.toml ./config.toml   4.创建一篇测试新文章 1  hugo new post/hello.md   5.生成博客静态博客 1 2  # 生成静态网页，包括草稿，生成好的内容在public目录中 hugo -D   四、GitHub 如果你以后不想通过 github管理文章，这里可以跳过。  ### 1.新建一个Github仓库 输完仓库名字后，按 enter 。 ![](https://img.yaleax.com/Screen-Recording-2019-11-17-20-13-44.gif) ### 2.初始化 GitHub 这些命令完成后，会上传全部Hugo博客源码到 GitHub ```bash #仓库名字repository以hellotest为例 echo \"# hellotest\"  README.md git init git add . git commit -m \"first commit\" git remote add origin git@github.com:替换成你的GitHub用户名/hellotest.git git push -u origin master ``` 五、V2ray 1.更新为上海时间 1 2  cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime date -R   2.安装 V2ray 1 2  wget https://install.direct/go.sh sudo bash go.sh   3.编辑v2ray配置 1 2  rm /etc/v2ray/config.json nano /etc/v2ray/config.json   4.v2ray 配置内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  { \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 30123, \u0026#34;listen\u0026#34;:\u0026#34;127.0.0.1\u0026#34;, //只监听 127.0.0.1，避免除本机外的机器探测到开放了 30123 端口 \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;b831381d-6324-4d53-ad4f-8cda48b30811\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/ray30123\u0026#34; } } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} } ] }   修改完成后，你需要同时按 ctrl + x来退出,再输入y确认保存，再按 enter 保存。  5.V2ray 控制命令 sudo systemctl start v2ray # 启动v2ray\nsudo systemctl status v2ray # 查看v2ray状态\nsudo systemctl stop v2ray # 停止v2ray\nsudo systemctl restart v2ray # 重新启动v2ray  6.启动 V2ray并查看状态 1 2  sudo systemctl start v2ray sudo systemctl status v2ray   7.暂停 V2ray 1  sudo systemctl stop v2ray   六、Filebrowser 1.安装 Filebrowser 1  curl -fsSL https://filebrowser.xyz/get.sh | bash   安装目录：/usr/local/bin/filebrowser\n2.创建 Filebrowser配置文件 1 2 3  mkdir /etc/filebrowser mkdir /etc/filebrowser/filebrowser nano /etc/filebrowser/filebrowser.json   3.Filebrowser.json配置信息 把这些信息复制进去\n1 2 3 4 5 6 7 8  { \u0026#34;port\u0026#34;: 18888, \u0026#34;baseURL\u0026#34;: \u0026#34;/admin\u0026#34;, \u0026#34;address\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;log\u0026#34;: \u0026#34;stdout\u0026#34;, \u0026#34;database\u0026#34;: \u0026#34;/var/www/suan/database.db\u0026#34;, \u0026#34;root\u0026#34;: \u0026#34;/var/www\u0026#34; }   4.设置Filebrowser系统服务文件 1  nano /etc/systemd/system/filebrowser.service   5.filebrowser.service配置文件 1 2 3 4 5 6 7 8 9  [Unit] Description=File Browser After=network.target [Service] ExecStart=/usr/local/bin/filebrowser -c /etc/filebrowser/filebrowser.json [Install] WantedBy=multi-user.target   6.重新载入systemctl 1  systemctl daemon-reload   7.启动 filebrowser 1 2  systemctl start filebrowser   状态：systemctl status filebrowser\n启动：systemctl start filebrowser\n停止：systemctl stop filebrowser\n重启：systemctl restart filebrowser  ### 8.登录地址 http://你的ip:1888/admin 帐号:`admin` 密码:`admin` ### 9.启动 https 启动 https后面会介绍，利用 Caddy 反代,添加一句，后面 Caddy 配置文件我会加进去。 `proxy /admin 127.0.0.1:18888 \\\\反代 filebreowser` 七、Caddy 1.安装 Caddy 1 2 3  wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh \u0026amp;\u0026amp; chmod +x caddy_install.sh \u0026amp;\u0026amp; bash caddy_install.sh install http.filemanager http.git #备用地址 wget -N --no-check-certificate https://www.moerats.com/usr/shell/Caddy/caddy_install.sh \u0026amp;\u0026amp; chmod +x caddy_install.sh \u0026amp;\u0026amp; bash caddy_install.sh~   2.设置 Cadddy所需要的目录 1 2 3 4 5 6 7 8 9  # 建立配置文件，更改文件所有权 mkdir /usr/local/caddy/ touch /usr/local/caddy/Caddyfile chown -R root:www-data /usr/local/caddy/ # 建立日志目录，给与写入权限 mkdir /var/log/caddy touch /var/log/caddy/access.log chown -R www-data:root /var/log/caddy chmod 0666 /var/log/caddy/access.log   3.编辑 Caddy配置文件 1  nano /usr/local/caddy/Caddyfile   4.Caddy配置文件 1 2 3 4 5 6 7 8 9 10 11 12  suan.su { gzip tls 123456212@mail.com log /var/log/caddy/access.log root /var/www/suan/public proxy /admin 127.0.0.1:18888 \\\\反代 filebreowser proxy /ray30123 localhost:30123 { websocket header_upstream -Origin } }   修改完成后，你需要同时按 ctrl + x来退出,再输入y确认保存，再按 enter 保存。  5.Caddy文件说明 安装目录：/usr/local/caddy/\nCaddy配置文件位置：/usr/local/caddy/Caddyfile\nCaddy自动申请SSL证书位置：/.caddy/acme/acme-v02.api.letsencrypt.org/sites/xxx.xxx(域名)/\n6.Caddy 控制命令 启动：/etc/init.d/caddy start\n停止：/etc/init.d/caddy stop\n重启：/etc/init.d/caddy restart\n查看状态：/etc/init.d/caddy status\n查看Caddy启动日志：tail -f /tmp/caddy.log  7.启动 Caddy服务并查询状态 1 2 3  /etc/init.d/caddy start sudo systemctl start v2ray tail -f /tmp/caddy.log   🎉 完成！访问自己的域名试试吧!\n7.1 安装 bbrplus 1 2 3  wget -N --no-check-certificate \u0026#34;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\u0026#34; chmod +x tcp.sh ./tcp.sh   八、后话 如果你当正常博客使用，你还需要把下面这些坑填上。\n 修改Hugo博客配置文件。 V2ray客户端配置教程。 Caddy自动化配置。 使用GitHub更新博客文章。  ","description":"","id":20,"section":"posts","tags":["v2ray","Caddy","Hugo"],"title":"Hugo Caddy V2ray on Ubuntu and filebrowser","uri":"https://www.yaleax.com/posts/hugo-caddy-v2ray-on-ubuntu/"},{"content":"前言 StackBit，在这个网站，你仅仅需要使用鼠标选择，就可以搭建一个静态博客，并且拥有后台管理界面，他所使用的供应商也是我上面提到的这几个。虽然StackBit现在主题不多，但是有了它，会大大降低了使用静态博客的门槛。StackBit是一条捷径，但是对新手来说，还是会有坑。\n","description":"静态博客支持hugo、hexo、Jekyll、Gatsby等后台编辑支持Forestry、Netlify CMS、Contentful","id":21,"section":"posts","tags":["Stackbit","Hugo","Netlify"],"title":"使用Stackbit 来快速搭建静态博客","uri":"https://www.yaleax.com/posts/%E4%BD%BF%E7%94%A8stackbit-%E6%9D%A5%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"content":"前言 这是一篇手动创建Hugo博客的教程，跟着教程一步一步的进行，最终你将会得到一个类似我这样的博客，在这个过程中，如果你能用心思考，善用搜索，你将会理解，这些服务彼此是如何连接的，每一项服务的功能是什么，以及如何修改它们的配置文件。理解这些后，你就可以根据自己的需求，创建自己的博客组合了。如果不想手动创建，你也可以使用 Stackbit来自动创建博客。它支持Hugo,Gatsby和Jekyll，后台管理支持Netlify CMS，Forestry和Contentful。关于Stackbit的教程，以后会写，先挖坑。\n一、技术总结 经过一周的摸索和实践，终于把这个博客搭建成功了。简单总结一下本博客所使用的技术。\n 博客生成平台：Hugo 博客主题：Jane 博客代码托管：GitHub 博客服务器供应商：Netlify 博客后台管理平台：Netlify CMS 域名服务商：RuTLD DNS服务商：CloudFlare 域名证书：CloudFlare CDN网络加速：CloudFlare 图床：BackBlaze  上面提到的这些服务，除了购买域名需要花钱，其他服务都是免费的，购买域名也不是必要条件， Netlify 可以提供的二级域名。\n二、必要条件  注册 GitHub 注册 Netlify 注册 CloudFlare 一台可以访问网络的计算机  三、博客使用的服务简介  Hugo 是使用 Go 语言编写的，静态博客生成平台。使用Hugo平台，你可以快速的生成博客页面，因为是静态博客，所以访问者的载入速度是非常快的，静态博客对爬虫是很友好的，这样就利于被搜索引擎抓取网站。 Netlify 提供免费的静态博客托管服务和免费二级域名：https://suan.netlify.com。 GitHub提供免费代码托管服务，Hugo 生成的代码，会存在这里里。 Netlify CMS是一套开源的后台管理平台，支持 Markdown 语法，给习惯在后台编辑文章的人使用。 CloudFlare拥有全球最大的网络之一，提供 CDN,DNS,ssl证书等服务,远不止这些。  四、安装 Hugo 1.Ubuntu系统： 先去 Hugo release查看 Hugo的最新版本，用最新版本号替代下面代码里面的0.59.1，你也可以直接复制下面的代码，进行下载和安装。\n1 2 3 4  #使用 wget 下载 hugo wget https://github.com/gohugoio/hugo/releases/download/v0.59.1/hugo_0.59.1_Linux-64bit.deb #使用 dpkg 安装 .deb 文件 sudo dpkg -i hugo_0.59.1_Linux-64bit.deb   2.MacOS 系统： 1  brew install hugo   如果你没有brew包工具，你可以用下面的命令安装brew包工具\n1  /usr/bin/ruby -e \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026#34;   五、使用 Hugo创建静态博客 1.创建网站存放目录 1 2 3 4 5 6  # 使用 mkdir命令，创建网站目录 mkdir -p /var/www # 使用 cd命令，进入创建的目录 cd /var/www # 新建站点，名字以3cho为例,你可以替换成自己的名字 hugo new site 3cho   2.安装主题，主题可以去Hugo官方主题库下载,本文以 even 主题为例 1 2 3 4 5 6  # 进入新建好的3cho目录 cd /var/www/3cho # 安装主题（不同主题安装方式不同） git clone https://github.com/olOwOlo/hugo-theme-even themes/even #复制主题自带的 config.toml文件到当前根目录 cp themes/even/exampleSite/config.toml ./config.toml   3.创建一篇测试新文章 1 2  #生成一篇新文章 hugo new post/hello.md   4.生成博客静态博客 1 2  # 生成静态网页，包括草稿，生成好的内容在public目录中 hugo -D   5.启动本地博客服务器 1  hugo server   点击访问你的博客http://localhost:1313\n 到这里，博客搭建工作已经完成了，接下来是把这个博客，部署到网络上，这样其他人才可以访问你的博客了。\n 6.关闭本地博客服务器 使用快捷键 ctrl+c 关闭本地博客服务器\n六、GitHub使用 1.创新一个新的Github仓库 Create a new repository repository在 GitHub点击查看官方教程，你不需要看文字，跟着图走就行。repository名字是什么很重要，下面我们要用它来替换3cho。\n2.初始化 GitHub，初始化意思是初次建立本地目录和 GitHub远程仓库的连接 1 2 3 4 5 6 7  #仓库名字repository以3cho为例 echo \u0026#34;# 3cho\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git remote add origin git@github.com:替换成你的 GitHub用户名/3cho.git git push -u origin master   七、连接Netlify前的准备 1.删除主题下面的.git文件，主题以 even为例 1 2  cd /var/www/3cho/themes/even rm -rf .git   2.创建 Netlify 需要的配置文件 1  nano netlify.toml   3.复制下面的文件粘贴进去，Hugo version后面的数字替换成，你安装的版本。不明白什么意思，可以不改。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  [build] publish = \u0026#34;public\u0026#34; command = \u0026#34;hugo --gc --minify\u0026#34; [context.production.environment] HUGO_VERSION = \u0026#34;0.59.1\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; [context.split1] command = \u0026#34;hugo --gc --minify --enableGitInfo\u0026#34; [context.split1.environment] HUGO_VERSION = \u0026#34;0.59.1\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview] command = \u0026#34;hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.59.1\u0026#34; [context.branch-deploy] command = \u0026#34;hugo --gc --minify -b $DEPLOY_PRIME_URL\u0026#34; [context.branch-deploy.environment] HUGO_VERSION = \u0026#34;0.59.1\u0026#34; [context.next.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34;   粘贴完成后，你需要同时按 ctrl+x来退出,再输入y确认保存，再按回车确认保存。\n4.创建 Netlify CMS所需要的配置文件和目录 1  touch static/.keep data/.keep   5.创建Netlify CMS需要用的 admin 和 img文件夹 1 2  mkdir /var/www/3cho/static/admin mkdir /var/www/3cho/static/img   6.创建Netlify CMS页面 1  nano /var/www/3cho/static/admin/index.html   7.复制下面的文件粘贴进去 1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Content Manager\u0026lt;/title\u0026gt; \u0026lt;!-- Include the script that enables Netlify Identity on this page. --\u0026gt; \u0026lt;script src=\u0026#34;https://identity.netlify.com/v1/netlify-identity-widget.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- Include the script that builds the page and powers Netlify CMS --\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   粘贴完成后，你需要同时按 ctrl+x来退出,再输入y确认保存，再按回车确认保存。\n8.创建Netlify CMS配置文件 1  nano /var/www/3cho/static/admin/config.yml   9.复制下面的文件粘贴进去backend:name:git-gatewaybranch:mastermedia_folder:static/imgpublic_folder:/imgcollections:- name:configlabel:Configfiles:- name:configlabel:Configfile:config.tomlfields:- widget:stringname:titlelabel:Titlerequired:false- widget:stringname:baseURLlabel:BaseURLrequired:falsehint:Hostname(andpath)totheroot- widget:booleanname:enableRobotsTXTlabel:EnableRobotsTextrequired:false- widget:booleanname:enableEmojilabel:EnableEmojirequired:false- widget:stringname:themelabel:Themenamerequired:false- widget:booleanname:hasCJKLanguagelabel:HasCJKLanguagerequired:false- widget:numbername:paginatelabel:Paginaterequired:falsehint:NumberofarticlesdisplayedonthehomepagevalueType:int- widget:numbername:rssLimitlabel:RssLimintrequired:falsehint:LimitEntryCounttoRssfilevalueType:int- widget:stringname:disqusShortnamelabel:DisqusShortnamerequired:false- widget:stringname:googleAnalyticslabel:GoogleAnalyticscoderequired:false- widget:stringname:copyrightlabel:Copyrightrequired:false- widget:stringname:defaultContentLanguagelabel:DefaultContentLanguagerequired:false- widget:objectname:languageslabel:Languagesrequired:falsefields:- widget:objectname:enlabel:Englishrequired:falsefields:- widget:stringname:languageCodelabel:Languagecoderequired:false- widget:objectname:authorlabel:Authorrequired:falsefields:- widget:stringname:namelabel:Namerequired:false- widget:objectname:sitemaplabel:Sitemaprequired:falsefields:- widget:stringname:changefreqlabel:Changefrequencyrequired:false- widget:numbername:prioritylabel:Priorityrequired:falsevalueType:float- widget:stringname:filenamelabel:Filenamerequired:false- widget:objectname:menulabel:Menurequired:falsefields:- widget:listname:mainlabel:MainMenurequired:falsefields:- widget:stringname:namelabel:MenuNamerequired:false- widget:numbername:weightlabel:Pageorderweightrequired:falsevalueType:int- widget:stringname:identifierlabel:Identifierrequired:false- widget:stringname:urllabel:MenuLinkrequired:false- widget:objectname:paramslabel:SiteParametersrequired:falsefields:- widget:stringname:sincelabel:Sincerequired:falsehint:SiteCreationTime- widget:booleanname:homeFullContentlabel:HomeFullContentrequired:falsehint:\u0026gt;- if false, show post summaries on home page. Othewise show fullcontent.- widget:booleanname:rssFullContentlabel:RssFullContentrequired:falsehint:\u0026#39;if false, Rss feed instead of the summary\u0026#39;- widget:stringname:logoTitlelabel:LogoTitlerequired:false- widget:listname:keywordslabel:Keywordsrequired:falsefield:label:Stringname:stringwidget:string- widget:stringname:descriptionlabel:descriptionrequired:false- widget:stringname:dateFormatToUselabel:DateFormatrequired:false- widget:booleanname:toclabel:TOCrequired:false- widget:booleanname:photoswipelabel:PhotoSwiperequired:false- widget:stringname:contentCopyrightlabel:ContentCopyrightrequired:false- widget:listname:customCSSlabel:CustomCssrequired:falsehint:\u0026gt;- if [\u0026#39;custom.css\u0026#39;], load \u0026#39;/static/css/custom.css\u0026#39; fileif[\u0026#39;custom.css\u0026#39;],load\u0026#39;/static/css/custom.css\u0026#39;filefield:label:Stringname:stringwidget:string- widget:listname:customJSlabel:CustomJSrequired:falsehint:\u0026#39;if [\u0026#39;\u0026#39;custom.js\u0026#39;\u0026#39;], load \u0026#39;\u0026#39;/static/js/custom.js\u0026#39;\u0026#39; file\u0026#39;field:label:Stringname:stringwidget:string- widget:objectname:sociallabel:Socialrequired:falsefields:- widget:stringname:a-emaillabel:Emailrequired:false- widget:stringname:b-stack-overflowlabel:StackOverflowrequired:false- widget:stringname:c-twitterlabel:Twitterrequired:false- widget:stringname:d-facebooklabel:Facebookrequired:false- widget:stringname:e-linkedinlabel:Linkedinrequired:false- widget:stringname:f-googlelabel:Googlerequired:false- widget:stringname:g-githublabel:Githubrequired:false- widget:stringname:h-weibolabel:Weiborequired:false- widget:stringname:i-zhihulabel:Zhihurequired:false- widget:stringname:j-doubanlabel:Doubanrequired:false- widget:stringname:k-pocketlabel:Pocketrequired:false- widget:stringname:l-tumblrlabel:Tumblrrequired:false- widget:stringname:m-instagramlabel:Instagramrequired:false- widget:stringname:n-gitlablabel:Gitlabrequired:false- widget:stringname:o-goodreadslabel:Goodreadsrequired:false- widget:stringname:p-codinglabel:Codingrequired:false- widget:stringname:q-bilibililabel:Bilibilirequired:false- widget:stringname:r-codeforceslabel:Codeforcesrequired:false- widget:stringname:s-mastodonlabel:Mastodonrequired:false- name:basicpagelabel:Basicpagesfolder:content/create:trueextension:mdslug:\u0026#39;{{slug}}\u0026#39;fields:- widget:stringname:titlelabel:Titlerequired:false- widget:datetimename:datelabel:PublishDaterequired:false- widget:datetimename:lastmodlabel:LastModifiedDaterequired:false- widget:stringname:menulabel:Menurequired:false- widget:numbername:weightlabel:PageOrderweightrequired:falsevalueType:int- widget:booleanname:commentlabel:Commentrequired:false- widget:booleanname:mathjaxlabel:Mathjaxrequired:falsehint:\u0026#39;see https://www.mathjax.org/\u0026#39;- widget:markdownname:bodylabel:Contentrequired:falsehint:Pagecontent- name:postlabel:Blogpostssfolder:content/postcreate:trueextension:mdslug:\u0026#39;{{slug}}\u0026#39;fields:- widget:stringname:titlelabel:BlogTitlerequired:false- widget:stringname:descriptionlabel:Descriptionrequired:false- widget:stringname:authorlabel:BlogAuthorrequired:false- widget:datetimename:datelabel:Publishdaterequired:false- widget:datetimename:lastmodlabel:LastModifiedDaterequired:false- widget:listname:tagslabel:Tagsrequired:falsefield:label:Stringname:stringwidget:string- widget:listname:categorieslabel:Categoriesrequired:falsefield:label:Stringname:stringwidget:string- widget:booleanname:draftlabel:Draftrequired:false- widget:booleanname:commentlabel:Commentrequired:false- widget:booleanname:toclabel:Tocrequired:false- widget:booleanname:autoCollapseToclabel:AutoCollapsTocrequired:false- widget:stringname:contentCopyrightlabel:ContentCopyrightrequired:false- widget:booleanname:rewardlabel:Rewardrequired:false- widget:booleanname:mathjaxlabel:Mathjaxrequired:falsehint:\u0026#39;see https://www.mathjax.org/\u0026#39;- widget:booleanname:katexlabel:Katexrequired:falsehint:\u0026#39;See https://github.com/KaTeX/KaTeX\u0026#39;- widget:stringname:markuplabel:Markuprequired:falsehint:\u0026#39;See https://gohugo.io/content-management/formats/#mmark\u0026#39;- widget:numbername:weightlabel:Weightrequired:falsevalueType:int- widget:objectname:menulabel:Menurequired:falsefields:- widget:objectname:mainlabel:Mainrequired:falsefields:- widget:stringname:parentlabel:ParentMenurequired:false- widget:numbername:weightlabel:Weightrequired:falsevalueType:int- widget:markdownname:bodylabel:Contentrequired:falsehint:Pagecontent  粘贴完成后，你需要同时按 ctrl+x来退出,再输入y确认保存，再按回车确认保存。\n10.上传到GitHub 1 2 3 4 5 6 7  #仓库名字repository以3cho为例 echo \u0026#34;# 3cho\u0026#34; \u0026gt;\u0026gt; README.md git init git add . git commit -m \u0026#34;install\u0026#34; git remote add origin git@github.com:替换成你的 GitHub用户名/3cho.git git push -u origin master   八、Netlify连接 GitHub仓库 1.使用Github帐号登录Netlify 2.创建新的站点 3.连接 Github 4.选择博客说在的GitHub仓库 5.部署  等待完成，你的博客就已经成功创建了。Netlify 会提供一个二级域名。但是名字比较难记，你可以更改一个好记一些的。\n 6.更改二级域名名字  大功告成\n 九、Netlify CMS 1.开启身份验证功能 2.开启 Git Gateway 3.开启邮箱免验证功能 4.邀请自己成为管理员 5.填写自己的邮箱 6.去邮箱接收邀请邮箱 7.访问Netlify CMS后台 后台地址是，你的网站后面加 admin，以 https://suan.su 为例，后台管理登录地址应该是:https://suan.su/admin\n后话 当我逐渐熟悉了Github和找到了喜爱的本地Markdown编辑器 Typora后，我已经不太想使用netlify cms了，但是 netlify cms对初学者还是很友好的。\n","description":"使用Hugo +GitHub + Netlify+Netlify CMS，来制作个人免费静态博客","id":22,"section":"posts","tags":["hugo","博客"],"title":"使用Hugo +GitHub + Netlify+Netlify CMS，来制作个人免费静态博客","uri":"https://www.yaleax.com/posts/%E4%BD%BF%E7%94%A8hugo-github-netlify-netlify-cms%E6%9D%A5%E5%88%B6%E4%BD%9C%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"}]